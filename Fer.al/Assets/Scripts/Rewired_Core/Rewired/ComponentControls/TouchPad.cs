using System;
using System.Collections.Generic;
using Rewired.ComponentControls.Data;
using Rewired.Internal;
using Rewired.Utils.Attributes;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace Rewired.ComponentControls
{
	[Serializable]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Image))]
	public sealed class TouchPad : TouchInteractable, IPointerDownHandler, IPointerUpHandler, IEventSystemHandler
	{
		public enum AxisDirection
		{
			Both,
			Horizontal,
			Vertical
		}

		public enum TouchPadMode
		{
			Delta,
			ScreenPosition,
			VectorFromCenter,
			VectorFromInitialTouch
		}

		public enum ValueFormat
		{
			Pixels,
			Screen,
			Physical,
			Direction
		}

		private class dFUjlNlXKzLEwMEvPWlCFDoWiJta
		{
			private class LOYICrNmJbEDpcDLFqNLeTHiFDY
			{
				public float jMeIpvfjZOxlpswPIuhuwRcOfdO;

				public float FgjvfzHcWabyGiXRtsKQNmtuoEKC;

				public uint eupkLNYHupbKxOgCHbqidLtXZAwi;
			}

			private int mVECVjbYFaPhPNQctHGOhFAndGU;

			private LOYICrNmJbEDpcDLFqNLeTHiFDY[] BuwIKNnQECuDvuXrWMqVIxlxRgA;

			private int JmjyOQGqMTQVyuPjpVribdoqBbW;

			public dFUjlNlXKzLEwMEvPWlCFDoWiJta(int maxSmoothFrames)
			{
			}

			public void IkSMympyYfTpBxGGBkGOyOMOaezh(float P_0, float P_1)
			{
			}

			public Vector2 IjzmsmvNpkKBYeAGrGuMVKQsCYQ()
			{
				return default(Vector2);
			}

			private void AFKVQgrHuwiOwfOUIfeZXkJEZEl()
			{
			}

			private static int eZAMChHDXNgmrtyMjYWIOHUYdkj(int P_0, int P_1)
			{
				return default(int);
			}

			private int XUVqQKnBoCQfbGmCIQBaomAPHKT(int P_0, int P_1)
			{
				return default(int);
			}

			private static bool RRxmUmWwueUrTzwHPpzYwWNwuBO(uint P_0, uint P_1)
			{
				return default(bool);
			}
		}

		[Serializable]
		public class ValueChangedEventHandler : UnityEvent<Vector2>
		{
		}

		[Serializable]
		public class TapEventHandler : UnityEvent
		{
		}

		[Serializable]
		public class PressDownEventHandler : UnityEvent
		{
		}

		[Serializable]
		public class PressUpEventHandler : UnityEvent
		{
		}

		private const int SMOOTH_DELTA_FRAME_COUNT = 3;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("The Custom Controller element that will receive input values from the touch pad's X axis.")]
		private CustomControllerElementTargetSetForFloat _horizontalAxisCustomControllerElement;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("The Custom Controller element that will receive input values from the touch pad's Y axis.")]
		private CustomControllerElementTargetSetForFloat _verticalAxisCustomControllerElement;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("The Custom Controller element that will receive input values from touch pad taps.")]
		private CustomControllerElementTargetSetForBoolean _tapCustomControllerElement;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("The Custom Controller element that will receive input values from touch pad presses.")]
		private CustomControllerElementTargetSetForBoolean _pressCustomControllerElement;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("The axis directions in which movement is allowed. You can restrict movement to one or both axes.")]
		private AxisDirection _axesToUse;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("The mode of the touch pad.\n\nDelta - Returns the change in position of the touch from the previous to the current frame.\n\nScreen Position - Returns the absolute position of the touch  on the screen.\n\nVector From Center - Returns a vector from the center of the Touch Pad to the current touch position.\n\nVector From Initial Touch - Returns a vector from the intial touch position to the current touch position.")]
		private TouchPadMode _touchPadMode;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("The format of the resulting data generated by the touch pad.\n\nPixels - Screen pixels.\n\nScreen - The proportion of the value to screen size in the corresponding dimension. 1 unit = 1 screen length (width for X, height for Y).\n\nPhysical - 1 unit = 1/100th of an inch. The resulting value will be consistent across different screen resolutions and sizes. IMPORTANT: This relies on the value returned by UnityEngine.Screen.dpi. If the device does not return a value, a reference resolution of 96 dpi will be used.\n\nDirection - A normalized direction vector.")]
		private ValueFormat _valueFormat;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("If enabled, when swiped and released, the value will slowly fall toward zero based on the Friction value. This only has an effect if Touch Pad Mode is set to Position Delta.")]
		private bool _useInertia;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("Determines how quickly a swipe value will fall toward zero when Use Inertia is enabled.")]
		[FieldRange(0f, float.MaxValue)]
		private float _inertiaFriction;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("If true, the touch pad can be activated by a touch swipe that began in an area outside the touch pad region. If false, the touch pad can only be activated by a direct touch.")]
		private bool _activateOnSwipeIn;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("If true, the touch pad will stay engaged even if the touch that activated it moves outside the touch pad region. If false, the touch pad will be released once the touch that activated it moves outside the touch pad region.")]
		private bool _stayActiveOnSwipeOut;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("Should taps on the touch pad be processed?")]
		private bool _allowTap;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("The maximum touch duration allowed for the touch to be considered a tap. A touch that lasts longer than this value will not trigger a tap when released.")]
		[FieldRange(0f, float.MaxValue)]
		private float _tapTimeout;

		[SerializeField]
		[CustomObfuscation]
		[FieldRange(-1, int.MaxValue)]
		[Tooltip("The maximum movement distance allowed in pixels since the touch began for the touch to be considered a tap. [-1 = no limit]")]
		private int _tapDistanceLimit;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("Should presses (continual press like a button) on the touch pad be processed?")]
		private bool _allowPress;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("Time the touch pad must be touched before it will be considered a press.")]
		private float _pressStartDelay;

		[SerializeField]
		[CustomObfuscation]
		[FieldRange(-1, int.MaxValue)]
		[Tooltip("The maximum movement distance allowed in pixels since the touch began for the touch to be considered a press. Any movement beyond this value will cancel the press. [-1 = no limit]")]
		private int _pressDistanceLimit;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("If enabled, the control will be hidden when gameplay starts.")]
		private bool _hideAtRuntime;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("The underlying Axis 2D.")]
		private StandaloneAxis2D _axis2D;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("Event sent when the value changes.")]
		private ValueChangedEventHandler _onValueChanged;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("Event sent when the touch pad is tapped. This event will only be sent if allowTap is True.")]
		private TapEventHandler _onTap;

		[SerializeField]
		[CustomObfuscation]
		[Tooltip("Event sent when the touch pad is initally pressed. This event is for the Press button simulation which must be enabled by setting Press Allowed to True. This event will only be sent if allowPress is True.")]
		private PressDownEventHandler _onPressDown;

		[CustomObfuscation]
		[SerializeField]
		[Tooltip("Event sent when the touch pad is released after a press. This event is for the Press button simulation which must be enabled by setting Press Allowed to True. This event will only be sent if allowPress is True.")]
		private PressUpEventHandler _onPressUp;

		private bool _useXAxis;

		private bool _useYAxis;

		private int _pointerId;

		private int _realMousePointerId;

		[NonSerialized]
		private bool byeanBfvjEeOOwRBSBerFwsuBMBA;

		[NonSerialized]
		private bool IXgubBiHZOnBAjLkDRcJjAfbtyr;

		private bool _pointerDownIsFake;

		private Vector2 _touchStartPosition;

		private float _touchStartTime;

		private Vector3 _currentCenter;

		private Vector2 _previousTouchPosition;

		private int _lastTapFrame;

		private bool _isEligibleForTap;

		private bool _isEligibleForPress;

		private bool _pressValue;

		private dFUjlNlXKzLEwMEvPWlCFDoWiJta _smoothDelta;

		private Dictionary<int, PointerEventData> __fakePointerEventData;

		public CustomControllerElementTargetSetForFloat horizontalAxisCustomControllerElement
		{
			get
			{
				return null;
			}
		}

		public CustomControllerElementTargetSetForFloat verticalAxisCustomControllerElement
		{
			get
			{
				return null;
			}
		}

		public CustomControllerElementTargetSetForBoolean tapCustomControllerElement
		{
			get
			{
				return null;
			}
		}

		public CustomControllerElementTargetSetForBoolean pressCustomControllerElement
		{
			get
			{
				return null;
			}
		}

		public AxisDirection axesToUse
		{
			get
			{
				return default(AxisDirection);
			}
			set
			{
			}
		}

		public TouchPadMode touchPadMode
		{
			get
			{
				return default(TouchPadMode);
			}
			set
			{
			}
		}

		public ValueFormat valueFormat
		{
			get
			{
				return default(ValueFormat);
			}
			set
			{
			}
		}

		public bool useInertia
		{
			get
			{
				return default(bool);
			}
			set
			{
			}
		}

		public float inertiaFriction
		{
			get
			{
				return default(float);
			}
			set
			{
			}
		}

		public bool activateOnSwipeIn
		{
			get
			{
				return default(bool);
			}
			set
			{
			}
		}

		public bool stayActiveOnSwipeOut
		{
			get
			{
				return default(bool);
			}
			set
			{
			}
		}

		public bool allowTap
		{
			get
			{
				return default(bool);
			}
			set
			{
			}
		}

		public float tapTimeout
		{
			get
			{
				return default(float);
			}
			set
			{
			}
		}

		public int tapDistanceLimit
		{
			get
			{
				return default(int);
			}
			set
			{
			}
		}

		public bool allowPress
		{
			get
			{
				return default(bool);
			}
			set
			{
			}
		}

		public float pressStartDelay
		{
			get
			{
				return default(float);
			}
			set
			{
			}
		}

		public int pressDistanceLimit
		{
			get
			{
				return default(int);
			}
			set
			{
			}
		}

		public bool hideAtRuntime
		{
			get
			{
				return default(bool);
			}
			set
			{
			}
		}

		public int pointerId
		{
			get
			{
				return default(int);
			}
			set
			{
			}
		}

		public bool hasPointer
		{
			get
			{
				return default(bool);
			}
		}

		public Vector2 touchStartPosition
		{
			get
			{
				return default(Vector2);
			}
		}

		public Vector2 touchPosition
		{
			get
			{
				return default(Vector2);
			}
		}

		public AxisCalibration horizontalAxisCalibration
		{
			get
			{
				return null;
			}
		}

		public AxisCalibration verticalAxisCalibration
		{
			get
			{
				return null;
			}
		}

		public Axis2DCalibration axis2DCalibration
		{
			get
			{
				return null;
			}
		}

		internal StandaloneAxis2D axis2D
		{
			get
			{
				return null;
			}
		}

		private int effectivePointerId
		{
			get
			{
				return default(int);
			}
		}

		private bool tapValue
		{
			get
			{
				return default(bool);
			}
		}

		public event UnityAction<Vector2> ValueChangedEvent
		{
			add
			{
			}
			remove
			{
			}
		}

		public event UnityAction TapEvent
		{
			add
			{
			}
			remove
			{
			}
		}

		public event UnityAction PressDownEvent
		{
			add
			{
			}
			remove
			{
			}
		}

		public event UnityAction PressUpEvent
		{
			add
			{
			}
			remove
			{
			}
		}

		[CustomObfuscation]
		private TouchPad()
		{
		}

		[CustomObfuscation]
		internal override void Awake()
		{
		}

		[CustomObfuscation]
		internal override void OnValidate()
		{
		}

		internal override bool OnInitialize()
		{
			return default(bool);
		}

		internal override void OnUpdate()
		{
		}

		internal override void OnCustomControllerUpdate()
		{
		}

		internal override void OnSetProperty()
		{
		}

		internal override void OnClear()
		{
		}

		public override void ClearValue()
		{
		}

		private void LZtLIradkTZxeuvnkQoCvQBxNXr()
		{
		}

		private void ngSCpflbmnAmEnJEbHrUjRCLHCB()
		{
		}

		private void dzynYViRaRMlteHKPpYVKSjcRik(AxisDirection P_0)
		{
		}

		private void MsGuhXEMmfanqTAvXbqFjDUICT()
		{
		}

		private void BQXLkxqmrsdRiepPtxyGHXIuPQt()
		{
		}

		private void IvRpjOAYYthzVxkzBPRWdoQLnFF()
		{
		}

		private void ZZYGIlXqqUsylsfQBQmTnvRyFpn()
		{
		}

		private void zxcfAcvnwhOviPQlyJevzmGbgxl(ref Vector2 P_0)
		{
		}

		private void ImouRQkIXMEoNjSzsGeHbJZwBkk(ref Vector2 P_0)
		{
		}

		private void BffNHkpvQpNHpcLLgKUWPenUbOQ()
		{
		}

		private Vector2 TYRElaYuYnmVyhgBDTWyacTpNzS(Vector2 P_0)
		{
			return default(Vector2);
		}

		private void bWoaCnGbNpCyBbXGQNlrHaHvCCum(bool P_0)
		{
		}

		private void RxEZUnGIHFENEtIpjktQHvdabdW(PointerEventData P_0)
		{
		}

		private void uyQABlNHvFbAnbhXXlzvvLWQhYr(PointerEventData P_0)
		{
		}

		private void cMtnsaxGhUfiDcRwjkYxflgBASiH(PointerEventData P_0)
		{
		}

		private void EzJjjNAhQSmydhBVfCMGbRhVYoAK(PointerEventData P_0)
		{
		}

		private void eCctVKDNgyQGyeaOcqjOyVlLJqO(int P_0, Vector2 P_1)
		{
		}

		private void vFVybIPqofnIcLfQTuNwraHYvlu()
		{
		}

		internal override void OnPointerUp(PointerEventData eventData)
		{
		}

		internal override void OnPointerDown(PointerEventData eventData)
		{
		}

		internal override void OnPointerEnter(PointerEventData eventData)
		{
		}

		internal override void OnPointerExit(PointerEventData eventData)
		{
		}

		private void OZFNDbURhVZKFtFmWGnJgPfugYpe()
		{
		}

		private bool dhOQlLJinYpERxCGGhjOgbBZapAV(int P_0)
		{
			return default(bool);
		}

		private PointerEventData LlGMCNteBCahnPiqWbTrHoAGivp(int P_0, GameObject P_1)
		{
			return null;
		}

		private PointerEventData IeozbiZwrTQxWvulmeRKsKBLdtja(int P_0, GameObject P_1)
		{
			return null;
		}

		private PointerEventData AMQXfcKdkhATGEHBZPeTJWJpfSUA(int P_0)
		{
			return null;
		}

		private void cuuvieNpgXrCVXOlgxCyYFCjPIj(PointerEventData P_0)
		{
		}

		private PointerEventData gEzDDiQGlFHTAMAVPqWluKHtuyP(int P_0)
		{
			return null;
		}
	}
}
