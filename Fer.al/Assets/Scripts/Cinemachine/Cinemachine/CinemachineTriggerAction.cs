using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

namespace Cinemachine
{
	[SaveDuringPlay]
	[HelpURL("https://docs.unity3d.com/Packages/com.unity.cinemachine@2.6/api/Cinemachine.CinemachineTriggerAction.html")]
	[DocumentationSorting(DocumentationSortingAttribute.Level.UserRef)]
	public class CinemachineTriggerAction : MonoBehaviour
	{
		[Serializable]
		public struct ActionSettings
		{
			public enum Mode
			{
				Custom,
				PriorityBoost,
				Activate,
				Deactivate,
				Enable,
				Disable,
				Play,
				Stop
			}

			[Serializable]
			public class TriggerEvent : UnityEvent
			{
			}

			public enum TimeMode
			{
				FromStart,
				FromEnd,
				BeforeNow,
				AfterNow
			}

			[Tooltip("What action to take")]
			public Mode m_Action;

			[Tooltip("The target object on which to operate.  If null, then the current behaviour/GameObject will be used")]
			public UnityEngine.Object m_Target;

			[Tooltip("If PriorityBoost, this amount will be added to the virtual camera's priority")]
			public int m_BoostAmount;

			[Tooltip("If playing a timeline, start at this time")]
			public float m_StartTime;

			[Tooltip("How to interpret the start time")]
			public TimeMode m_Mode;

			[Tooltip("This event will be invoked")]
			public TriggerEvent m_Event;

			public ActionSettings(Mode action)
			{
			}

			public void Invoke()
			{
			}
		}

		[Header("Trigger Object Filter")]
		[Tooltip("Only triggers generated by objects on these layers will be considered")]
		public LayerMask m_LayerMask;

		[TagField]
		[Tooltip("If set, only triggers generated by objects with this tag will be considered")]
		public string m_WithTag;

		[TagField]
		[Tooltip("Triggers generated by objects with this tag will be ignored")]
		public string m_WithoutTag;

		[NoSaveDuringPlay]
		[Tooltip("Skip this many trigger entries before taking action")]
		public int m_SkipFirst;

		[Tooltip("Repeat the action for all subsequent trigger entries")]
		public bool m_Repeating;

		public ActionSettings m_OnObjectEnter;

		public ActionSettings m_OnObjectExit;

		private HashSet<GameObject> m_ActiveTriggerObjects;

		private bool Filter(GameObject other)
		{
			return default(bool);
		}

		private void InternalDoTriggerEnter(GameObject other)
		{
		}

		private void InternalDoTriggerExit(GameObject other)
		{
		}

		private void OnTriggerEnter(Collider other)
		{
		}

		private void OnTriggerExit(Collider other)
		{
		}

		private void OnCollisionEnter(Collision other)
		{
		}

		private void OnCollisionExit(Collision other)
		{
		}

		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		private void OnTriggerExit2D(Collider2D other)
		{
		}

		private void OnCollisionEnter2D(Collision2D other)
		{
		}

		private void OnCollisionExit2D(Collision2D other)
		{
		}

		private void OnEnable()
		{
		}
	}
}
